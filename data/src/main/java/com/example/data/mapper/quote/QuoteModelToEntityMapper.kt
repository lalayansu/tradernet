package com.example.data.mapper.quote

import com.example.data.entity.QuoteEntity
import com.example.data.mapper.ModelToEntityMapper
import com.example.data.model.response.QuoteModel
import javax.inject.Inject

class QuoteModelToEntityMapper @Inject constructor() :
    ModelToEntityMapper<QuoteModel, QuoteEntity> {

    override fun toEntity(model: QuoteModel) = QuoteEntity(
        acd = model.acd,
        baf = model.baf,
        bap = model.bap,
        bas = model.bas,
        base_contract_code = model.base_contract_code,
        base_currency = model.base_currency,
        base_ltr = model.base_ltr,
        bat = model.bat,
        bbf = model.bbf,
        bbp = model.bbp,
        bbs = model.bbs,
        bbt = model.bbt,
        c = model.c,
        chg = model.chg,
        chg110 = model.chg110,
        chg22 = model.chg22,
        chg220 = model.chg220,
        chg5 = model.chg5,
        codesub_nm = model.codesub_nm,
        cpn = model.cpn,
        cpp = model.cpp,
        delta = model.delta,
        dpb = model.dpb,
        dps = model.dps,
        emitent_type = model.emitent_type,
        fv = model.fv,
        gamma = model.gamma,
        init = model.init,
        ipo = model.ipo,
        issue_nb = model.issue_nb,
        kind = model.kind,
        ltp = model.ltp,
        ltr = model.ltr,
        lts = model.lts,
        ltt = model.ltt,
        marketStatus = model.marketStatus,
        maxtp = model.maxtp,
        min_step = model.min_step,
        mintp = model.mintp,
        mrg = model.mrg,
        mtd = model.mtd,
        n = model.n,
        name = model.name,
        name2 = model.name2,
        ncd = model.ncd,
        ncp = model.ncp,
        op = model.op,
        option_type = model.option_type,
        otc_instr = model.otc_instr,
        p110 = model.p110,
        p22 = model.p22,
        p220 = model.p220,
        p5 = model.p5,
        pcp = model.pcp,
        pp = model.pp,
        quote_basis = model.quote_basis,
        rev = model.rev,
        scheme_calc = model.scheme_calc,
        step_price = model.step_price,
        strike_price = model.strike_price,
        theta = model.theta,
        trades = model.trades,
        type = model.type,
        UTCOffset = model.UTCOffset,
        virt_base_instr = model.virt_base_instr,
        vlt = model.vlt,
        vol = model.vol,
        x_agg_futures = model.x_agg_futures,
        x_curr = model.x_curr,
        x_currVal = model.x_currVal,
        x_descr = model.x_descr,
        x_dsc1 = model.x_dsc1,
        x_dsc1_reception = model.x_dsc1_reception,
        x_dsc2 = model.x_dsc2,
        x_dsc2_reception = model.x_dsc2_reception,
        x_dsc3 = model.x_dsc3,
        x_istrade = model.x_istrade,
        x_lot = model.x_lot,
        x_max = model.x_max,
        x_min = model.x_min,
        x_min_lot_q = model.x_min_lot_q,
        x_short = model.x_short,
        x_short_reception = model.x_short_reception,
        yld = model.yld,
        yld_ytm_ask = model.yld_ytm_ask,
        yld_ytm_bid = model.yld_ytm_bid,
        Volatility = model.Volatility,
        TradingSessionSubID = model.TradingSessionSubID,
        TradingReferencePrice = model.TradingReferencePrice,
        ClosePrice = model.ClosePrice
    )
}